# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import comm_pb2 as comm__pb2


class buyer_marketStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.register = channel.unary_unary(
                '/buyer_market/register',
                request_serializer=comm__pb2.reg_req.SerializeToString,
                response_deserializer=comm__pb2.reg_status.FromString,
                )
        self.sellitem = channel.unary_unary(
                '/buyer_market/sellitem',
                request_serializer=comm__pb2.item.SerializeToString,
                response_deserializer=comm__pb2.reg_status.FromString,
                )
        self.updateitem = channel.unary_unary(
                '/buyer_market/updateitem',
                request_serializer=comm__pb2.item_upd.SerializeToString,
                response_deserializer=comm__pb2.reg_status.FromString,
                )
        self.deleteitem = channel.unary_unary(
                '/buyer_market/deleteitem',
                request_serializer=comm__pb2.del_itm.SerializeToString,
                response_deserializer=comm__pb2.reg_status.FromString,
                )
        self.display_items = channel.unary_stream(
                '/buyer_market/display_items',
                request_serializer=comm__pb2.reg_req.SerializeToString,
                response_deserializer=comm__pb2.display_itms.FromString,
                )
        self.search = channel.unary_stream(
                '/buyer_market/search',
                request_serializer=comm__pb2.search_req.SerializeToString,
                response_deserializer=comm__pb2.search_itms.FromString,
                )
        self.buy_item = channel.unary_unary(
                '/buyer_market/buy_item',
                request_serializer=comm__pb2.buy_req.SerializeToString,
                response_deserializer=comm__pb2.reg_status.FromString,
                )
        self.add_to_wishlist = channel.unary_unary(
                '/buyer_market/add_to_wishlist',
                request_serializer=comm__pb2.add_wish.SerializeToString,
                response_deserializer=comm__pb2.reg_status.FromString,
                )
        self.rate_item = channel.unary_unary(
                '/buyer_market/rate_item',
                request_serializer=comm__pb2.item_rate.SerializeToString,
                response_deserializer=comm__pb2.reg_status.FromString,
                )


class buyer_marketServicer(object):
    """Missing associated documentation comment in .proto file."""

    def register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sellitem(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateitem(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteitem(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def display_items(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def search(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def buy_item(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def add_to_wishlist(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def rate_item(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_buyer_marketServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'register': grpc.unary_unary_rpc_method_handler(
                    servicer.register,
                    request_deserializer=comm__pb2.reg_req.FromString,
                    response_serializer=comm__pb2.reg_status.SerializeToString,
            ),
            'sellitem': grpc.unary_unary_rpc_method_handler(
                    servicer.sellitem,
                    request_deserializer=comm__pb2.item.FromString,
                    response_serializer=comm__pb2.reg_status.SerializeToString,
            ),
            'updateitem': grpc.unary_unary_rpc_method_handler(
                    servicer.updateitem,
                    request_deserializer=comm__pb2.item_upd.FromString,
                    response_serializer=comm__pb2.reg_status.SerializeToString,
            ),
            'deleteitem': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteitem,
                    request_deserializer=comm__pb2.del_itm.FromString,
                    response_serializer=comm__pb2.reg_status.SerializeToString,
            ),
            'display_items': grpc.unary_stream_rpc_method_handler(
                    servicer.display_items,
                    request_deserializer=comm__pb2.reg_req.FromString,
                    response_serializer=comm__pb2.display_itms.SerializeToString,
            ),
            'search': grpc.unary_stream_rpc_method_handler(
                    servicer.search,
                    request_deserializer=comm__pb2.search_req.FromString,
                    response_serializer=comm__pb2.search_itms.SerializeToString,
            ),
            'buy_item': grpc.unary_unary_rpc_method_handler(
                    servicer.buy_item,
                    request_deserializer=comm__pb2.buy_req.FromString,
                    response_serializer=comm__pb2.reg_status.SerializeToString,
            ),
            'add_to_wishlist': grpc.unary_unary_rpc_method_handler(
                    servicer.add_to_wishlist,
                    request_deserializer=comm__pb2.add_wish.FromString,
                    response_serializer=comm__pb2.reg_status.SerializeToString,
            ),
            'rate_item': grpc.unary_unary_rpc_method_handler(
                    servicer.rate_item,
                    request_deserializer=comm__pb2.item_rate.FromString,
                    response_serializer=comm__pb2.reg_status.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'buyer_market', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class buyer_market(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/buyer_market/register',
            comm__pb2.reg_req.SerializeToString,
            comm__pb2.reg_status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sellitem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/buyer_market/sellitem',
            comm__pb2.item.SerializeToString,
            comm__pb2.reg_status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateitem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/buyer_market/updateitem',
            comm__pb2.item_upd.SerializeToString,
            comm__pb2.reg_status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteitem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/buyer_market/deleteitem',
            comm__pb2.del_itm.SerializeToString,
            comm__pb2.reg_status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def display_items(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/buyer_market/display_items',
            comm__pb2.reg_req.SerializeToString,
            comm__pb2.display_itms.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def search(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/buyer_market/search',
            comm__pb2.search_req.SerializeToString,
            comm__pb2.search_itms.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def buy_item(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/buyer_market/buy_item',
            comm__pb2.buy_req.SerializeToString,
            comm__pb2.reg_status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def add_to_wishlist(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/buyer_market/add_to_wishlist',
            comm__pb2.add_wish.SerializeToString,
            comm__pb2.reg_status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def rate_item(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/buyer_market/rate_item',
            comm__pb2.item_rate.SerializeToString,
            comm__pb2.reg_status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class notifStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.notify = channel.unary_unary(
                '/notif/notify',
                request_serializer=comm__pb2.search_itms.SerializeToString,
                response_deserializer=comm__pb2.reg_status.FromString,
                )


class notifServicer(object):
    """Missing associated documentation comment in .proto file."""

    def notify(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_notifServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'notify': grpc.unary_unary_rpc_method_handler(
                    servicer.notify,
                    request_deserializer=comm__pb2.search_itms.FromString,
                    response_serializer=comm__pb2.reg_status.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'notif', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class notif(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def notify(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/notif/notify',
            comm__pb2.search_itms.SerializeToString,
            comm__pb2.reg_status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
